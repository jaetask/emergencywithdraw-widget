{"version":3,"sources":["config/constants/contracts.js","utils/contractHelper.js","utils/addressHelper.js","config/index.js","actions/emergencyWithdraw.js","contexts/AddressContext.js","hooks/useWeb3.js","hooks/usePools.js","hooks/useContract.js","config/constants/explorers.js","components/Pool.js","components/Pools.js","components/MasterchefSearch.js","App.js","reportWebVitals.js","index.js"],"names":["contracts","fetcher","getDefaultGasPrice","web3","chainId","toBN","utils","gasPrices","mul","pow","getContract","abi","address","undefined","eth","Contract","gasPrice","toString","getFetcherContract","fetcherAbi","getAddress","getFetcherAddress","getMasterchefContract","masterchefAddress","masterchefAbi","emergencyWithdraw","pid","a","masterchefContract","methods","send","from","currentProvider","selectedAddress","tx","wait","receipt","notification","open","message","status","console","error","AddressContext","createContext","providerOptions","walletconnect","package","WalletConnectProvider","options","infuraId","web3Modal","Web3Modal","cacheProvider","useWeb3","useState","provider","setProvider","web3info","setWeb3Info","log","connectWeb3","connect","provider_","Web3","net","getId","then","info","useEffect","usePools","pools","setPools","useContext","userAddress","useMemo","useFetcher","result","rawPools","start","interval","fetchPools","call","filter","pool","want","i","length","push","name","symbol","amount","description","fetch","explorers","getAddressLink","Pool","props","onEmergencyWithdraw","Item","Meta","avatar","src","title","target","rel","href","type","danger","onClick","Pools","item","mc","doEmergencyWithdraw","orientation","className","size","itemLayout","dataSource","renderItem","Search","Input","MasterchefSearch","onStart","placeholder","allowClear","enterButton","onSearch","App","setMasterchefAddress","setUserAddress","masterchefAddress_","Provider","value","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.546d2dbd.chunk.js","sourcesContent":["// list of contracts\n// Fetcher: Helper contract that is essential for a chain to work. It fetches all the pool data and returns it in a single call\nconst contracts = {\n  fetcher: {\n    137: \"0x9BD3829315A2F076a7702885c3D0aE9184B76643\",\n    56: \"\",\n  },\n};\n\nexport default contracts\n","import fetcherAbi from \"../config/abi/fetcher.json\";\nimport masterchefAbi from \"../config/abi/masterchef.json\";\nimport { getFetcherAddress } from \"./addressHelper\";\n\nexport const getDefaultGasPrice = (web3, chainId) => {\n  const toBN = web3.utils.toBN;\n  const gasPrices = {\n    56: toBN(5).mul(toBN(10).pow(toBN(9))),\n    137: toBN(1).mul(toBN(10).pow(toBN(9))),\n  };\n\n  return chainId in gasPrices ? gasPrices[chainId] : 0;\n};\nconst getContract = (abi, address, web3, chainId) => {\n  if (web3 === undefined) {\n    return undefined;\n  }\n  return new web3.eth.Contract(abi, address, {\n    gasPrice: getDefaultGasPrice(web3, chainId).toString(),\n  });\n};\n\nexport const getFetcherContract = (web3, chainId) => {\n  if (web3 === undefined || web3.eth === undefined) {\n    return undefined;\n  }\n  return getContract(\n    fetcherAbi,\n    getFetcherAddress(chainId, web3),\n    web3,\n    chainId\n  );\n};\n\nexport const getMasterchefContract = (web3, chainId, masterchefAddress) => {\n  if (\n    web3 === undefined ||\n    web3.eth === undefined ||\n    masterchefAddress == null\n  ) {\n    return undefined;\n  }\n  return getContract(masterchefAbi, masterchefAddress, web3, chainId);\n};\n","import { BSC_CHAIN_ID } from \"../config\";\nimport contracts from \"../config/constants/contracts\";\n\nexport const getAddress = (address, chainId) => {\n  return address[chainId] ? address[chainId] : address[BSC_CHAIN_ID];\n};\n\nexport const getFetcherAddress = (chainId) => {\n  return getAddress(contracts.fetcher, chainId);\n};\n\nexport const ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\n","export const BSC_CHAIN_ID = 56;\n","import { notification } from \"antd\"\nimport { getDefaultGasPrice, getMasterchefContract } from \"../utils/contractHelper\"\n\nconst emergencyWithdraw = (web3, chainId, masterchefAddress, pid) => {\n    return async () => {\n        try {\n            const masterchefContract = getMasterchefContract(web3, chainId, masterchefAddress)\n            const tx = await masterchefContract.methods.emergencyWithdraw(pid).send({\n                from: web3.currentProvider.selectedAddress,\n                gasPrice: getDefaultGasPrice(web3, chainId)\n            })\n            const receipt = await tx.wait()\n\n            notification.open({\n                message: 'Transaction Succeeded'\n            })\n            return receipt.status\n        } catch (e) {\n            console.error(e)\n            notification.open({\n                message: 'Transaction failed'\n            })\n        }\n    }\n}\nexport default emergencyWithdraw","// Context to share the masterchef address state between components\n\nimport { createContext } from \"react\";\n\nconst AddressContext = createContext();\n\nexport default AddressContext;\n","import { useEffect, useState } from \"react\";\n\nimport Web3 from \"web3\";\nimport Web3Modal from \"web3modal\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\n\nconst providerOptions = {\n  walletconnect: {\n    package: WalletConnectProvider,\n    options: {\n      infuraId: \"5b7ed00b5a864d5797572f8cfcc5052e\", // required, TODO: still needs to be set to our infura_id.\n    },\n  },\n};\n\nconst web3Modal = new Web3Modal({\n  cacheProvider: true, // optional\n  providerOptions, // required\n});\n\nconst useWeb3 = () => {\n  //todo: useWeb3Provider\n  const [provider, setProvider] = useState();\n  const [web3info, setWeb3Info] = useState({\n    web3: undefined,\n    chainId: undefined,\n  });\n  console.log(\"web3 starting\")\n  const connectWeb3 = () => {\n    const connect = async () => {\n      console.log(\"web3 connecting\")\n          const provider_ = await web3Modal.connect();\n          setProvider(provider_);\n          console.log(\"web3 web3img\")\n          const web3 = new Web3(provider_);\n          console.log(\"web3:\" + web3)\n          const chainId = await web3.eth.net.getId();\n          console.log(\"web3 ready\")\n          return { web3, chainId };\n        };\n        connect().then((info) => {\n          console.log(\"web3:\" + info)\n          setWeb3Info(info);\n        });\n  }\n  useEffect(() => {\n    connectWeb3();\n  }, [provider, web3info]);\n\n  // const disconnect = async () => {\n  //   // explicitly close when wallet connect is used\n  //   if (provider && provider.close) {\n  //     await provider.close();\n  //   }\n  //   web3Modal.clearCachedProvider();\n\n  //   setProvider(undefined);\n  //   setWeb3Info(undefined);\n  // };\n\n  return [web3info, connectWeb3];\n};\n\nexport default useWeb3;\n","import { notification } from \"antd\";\nimport { useContext, useEffect, useState } from \"react\"\nimport AddressContext from \"../contexts/AddressContext\";\nimport { useFetcher } from \"./useContract\";\nimport useWeb3 from \"./useWeb3\";\n\nconst usePools = () => {\n  const web3 = useWeb3()\n  const [pools, setPools] = useState()\n  const {masterchefAddress, userAddress} = useContext(AddressContext);\n  const fetcher = useFetcher();\n  useEffect(() => {\n    const fetch = async () => {\n      if (fetcher === undefined || web3 === undefined || masterchefAddress === undefined || userAddress === undefined) {\n        return []\n      }\n      let  result = []\n      let rawPools = []\n      let start = 0\n      const interval = 10\n      try {\n      do {\n        rawPools = await fetcher.methods.fetchPools(masterchefAddress, userAddress, start, interval).call()\n        // Currently fetcher always returns 10 pools, filter out padding ones\n        rawPools = rawPools.filter(pool => pool.want !== \"0x0000000000000000000000000000000000000000\") \n        for(let i = 0; i < rawPools.length; i++) {\n          const pool = rawPools[i]\n          result.push({\n            \"name\": pool.name, \n            \"symbol\": pool.symbol, \n            \"amount\": pool.amount, \n            \"pid\": start + i, \n            \"want\": pool.want,\n            \"mc\": masterchefAddress})\n        }\n        start += interval\n        \n      } while(rawPools.length >= interval && start <= 200) // Give up after 200 pools\n    }catch(e){\n        console.error(e)\n        notification.open({\n          message: 'Unable to fetch masterchef',\n          description: 'Are you sure the address is correct?'\n        })\n    }\n      return result\n    }\n    fetch().then(pools => {\n      setPools(pools);\n    })\n  }, [masterchefAddress, userAddress, fetcher, web3])\n\n  return pools\n}\n\nexport default usePools","import { useMemo } from \"react\";\nimport {\n  getFetcherContract,\n} from \"../utils/contractHelper\";\nimport useWeb3 from \"./useWeb3\";\n\nexport const useFetcher = () => {\n  const { web3, chainId } = useWeb3();\n  return useMemo(() => getFetcherContract(web3, chainId), [web3, chainId]);\n};","// Utility methods to get explorer links\n\nexport const explorers = {\n      137: \"https://polygonscan.com\",\n      56: \"https://bscscan.com\",\n  };\nexport const getAddressLink = (chainId, address) => {\n    return explorers[chainId] + \"/address/\" + address\n}","import { Avatar, List, Button } from \"antd\";\nimport { getAddressLink } from \"../config/constants/explorers\";\n\n// The pool component is an entry in the pools list that represents a masterchef pool\n// When the emergencyWithdraw button is pressed, the injected \"onEmergencyWithdraw\" method is called.\nfunction Pool(props) {\n  const { name, symbol, amount, pid, chainId, want, onEmergencyWithdraw } = props;\n\n  return (\n    <List.Item>\n      <List.Item.Meta\n        avatar={\n          <Avatar src=\"https://cryptologos.cc/logos/binance-usd-busd-logo.svg?v=010\" />\n        }\n        title={<a target=\"_blank\" rel=\"noreferrer\" href={getAddressLink(chainId,want)}>{name} - pid: {pid}</a>}\n        description={amount + \" \" + symbol}\n      />\n\n      <div>\n        {\" \"}\n        <Button type=\"primary\" danger onClick={onEmergencyWithdraw}>\n          Emergency Withdraw\n        </Button>\n      </div>\n    </List.Item>\n  );\n}\nexport default Pool;\n","import { List, Divider } from \"antd\";\nimport emergencyWithdraw from \"../actions/emergencyWithdraw\";\nimport usePools from \"../hooks/usePools\";\nimport useWeb3 from \"../hooks/useWeb3\";\n\nimport Pool from \"./Pool\";\n\nfunction Pools() {\n  const pools = usePools();\n  const { web3, chainId } = useWeb3();\n  const onEmergencyWithdraw = async (item) => {\n    const doEmergencyWithdraw = emergencyWithdraw(\n      web3,\n      chainId,\n      item.mc,\n      item.pid\n    );\n    doEmergencyWithdraw();\n  };\n  return (\n    <>\n      <Divider orientation=\"left\">Pools</Divider>\n      <List\n        className=\"demo-loadmore-list\"\n        size=\"large\"\n        itemLayout=\"horizontal\"\n        dataSource={pools}\n        renderItem={(item) => (\n          <Pool\n            name={item.name}\n            symbol={item.symbol}\n            amount={item.amount}\n            pid={item.pid}\n            chainId={chainId}\n            want={item.want}\n            onEmergencyWithdraw={() => onEmergencyWithdraw(item)}\n          ></Pool>\n        )}\n      />\n    </>\n  );\n}\nexport default Pools;\n","import { Input } from \"antd\";\n\nconst { Search } = Input;\n\n// Masterchef input component that calls the injected onStart method with the masterchef address as parameter\nfunction MasterchefSearch(props) {\n  const { onStart } = props;\n  return (\n    <Search\n      placeholder=\"Masterchef\"\n      allowClear\n      enterButton=\"Start\"\n      size=\"large\"\n      onSearch={onStart}\n    />\n  );\n}\n\nexport default MasterchefSearch;\n","import \"./App.css\";\n\nimport Pools from \"./components/Pools\";\nimport MasterchefSearch from \"./components/MasterchefSearch\";\nimport { useEffect, useState } from \"react\";\nimport AddressContext from \"./contexts/AddressContext\";\nimport { ZERO_ADDRESS } from \"./utils/addressHelper\";\nimport useWeb3 from \"./hooks/useWeb3\";\n\nfunction App() {\n  const [web3, connectWeb3]  = useWeb3();\n  const [masterchefAddress, setMasterchefAddress] = useState(undefined);\n  const [userAddress, setUserAddress] = useState(ZERO_ADDRESS);\n  useEffect(() => {\n    if (\n      web3 === undefined ||\n      web3.currentProvider === undefined ||\n      web3.currentProvider.selectedAddress === undefined\n    ) {\n      return;\n    }\n\n    setUserAddress(web3.currentProvider.selectedAddress);\n  }, [web3, userAddress]);\n\n  const onStart = async (masterchefAddress_) => {\n    await connectWeb3();\n    console.log(\"searching: \" + masterchefAddress_)\n    setMasterchefAddress(masterchefAddress_);\n  };\n\n  return (\n    <AddressContext.Provider value={{ masterchefAddress, userAddress }}>\n      <div className=\"App\">\n        <MasterchefSearch onStart={onStart} />\n        <Pools />\n      </div>\n    </AddressContext.Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}